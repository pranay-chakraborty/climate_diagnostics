name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      target:
        description: 'Publish target'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi

permissions:
  contents: read
  id-token: write  # Required for trusted publishing

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Get version from pyproject.toml
        id: get-version
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Check if prerelease
        id: check-prerelease
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ "$VERSION" =~ (a|b|rc|dev) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a prerelease version: $VERSION"
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release version: $VERSION"
          fi

      - name: Validate version consistency
        run: |
          # Check version consistency across files
          PYPROJECT_VERSION="${{ steps.get-version.outputs.version }}"
          INIT_VERSION=$(python -c "import sys; sys.path.insert(0, 'src'); from climate_diagnostics import __version__; print(__version__)")
          
          if [ "$PYPROJECT_VERSION" != "$INIT_VERSION" ]; then
            echo "Error: Version mismatch between pyproject.toml ($PYPROJECT_VERSION) and __init__.py ($INIT_VERSION)"
            exit 1
          fi
          
          echo "Version consistency validated: $PYPROJECT_VERSION"

  test-package:
    name: Test Package Build
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,test]

      - name: Run basic import test
        run: |
          python -c "import climate_diagnostics; print(f'Successfully imported climate_diagnostics v{climate_diagnostics.__version__}')"
          python -c "import xarray as xr; ds = xr.Dataset(); print('TimeSeries accessor:', hasattr(ds, 'ts'))"

      - name: Run quick test suite
        run: |
          python -m pytest tests/ -v --tb=short

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [validate-release, test-package]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-manifest

      - name: Check manifest
        run: check-manifest

      - name: Build package
        run: python -m build

      - name: Check package
        run: |
          twine check dist/*
          
      - name: List package contents
        run: |
          echo "Built packages:"
          ls -la dist/
          
          echo "Wheel contents:"
          python -m zipfile -l dist/*.whl

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-distributions
          path: dist/
          retention-days: 7

  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build-package
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'testpypi') ||
      (github.event_name == 'release' && needs.validate-release.outputs.is-prerelease == 'true')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/climate-diagnostics
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      - name: Test installation from TestPyPI
        run: |
          sleep 60  # Wait for package to be available
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ climate-diagnostics==${{ needs.validate-release.outputs.version }}
          python -c "import climate_diagnostics; print(f'Successfully installed from TestPyPI: v{climate_diagnostics.__version__}')"

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-package]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'pypi') ||
      (github.event_name == 'release' && needs.validate-release.outputs.is-prerelease == 'false')
    environment:
      name: pypi
      url: https://pypi.org/p/climate-diagnostics
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

      - name: Create success comment
        if: github.event_name == 'release'
        run: |
          echo "âœ… Package climate-diagnostics v${{ needs.validate-release.outputs.version }} successfully published to PyPI!"
          echo "ðŸ“¦ Install with: pip install climate-diagnostics==${{ needs.validate-release.outputs.version }}"
          echo "ðŸ”— View on PyPI: https://pypi.org/project/climate-diagnostics/${{ needs.validate-release.outputs.version }}/"

  post-publish:
    name: Post-Publish Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    if: success() && github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create post-release summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # ðŸŽ‰ Release Published Successfully!
          
          **Package:** climate-diagnostics  
          **Version:** ${{ needs.validate-release.outputs.version }}  
          **Release Type:** ${{ needs.validate-release.outputs.is-prerelease == 'true' && 'Pre-release' || 'Stable Release' }}
          
          ## ðŸ“¦ Installation
          \`\`\`bash
          pip install climate-diagnostics==${{ needs.validate-release.outputs.version }}
          \`\`\`
          
          ## ðŸ”— Links
          - [PyPI Package](https://pypi.org/project/climate-diagnostics/${{ needs.validate-release.outputs.version }}/)
          - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})
          - [Documentation](https://climate-diagnostics.readthedocs.io/)
          
          ## ðŸ“‹ What's Next?
          - [ ] Update conda-forge recipe (if applicable)
          - [ ] Announce release in relevant communities
          - [ ] Update project documentation if needed
          EOF